{"version":3,"sources":["Diagram.tsx","App.tsx","index.tsx"],"names":["Diagram","React","forwardRef","_ref","ref","diagramConfig","radius","count","separation","circleColor","lineColor","textBelowCircle","textColor","textInCircle","diameter","height","width","react_default","a","createElement","viewBox","concat","xmlns","range","map","idx","x1","y1","x2","y2","style","stroke","strokeWidth","key","cx","cy","Fragment","r","fill","x","y","fontSize","dominantBaseline","textAnchor","DiagramContainer","svgRef","createRef","_this2","this","src_Diagram","props","className","onClick","svgElement","current","svgBlob","Blob","outerHTML","type","saveAs","saveSvgAsPng","scale","Component","ConfigForm","setDiagramConfig","value","min","max","onChange","event","Object","objectSpread","parseInt","target","join","split","ReactDOM","render","_React$useState","useState","_React$useState2","slicedToArray","App_DiagramContainer","document","getElementById"],"mappings":"qTAqFeA,EAhFCC,IAAMC,WAAW,SAAAC,EAG/BC,GACG,IAHDC,EAGCF,EAHDE,cAKAC,EAQED,EARFC,OACAC,EAOEF,EAPFE,MACAC,EAMEH,EANFG,WACAC,EAKEJ,EALFI,YACAC,EAIEL,EAJFK,UACAC,EAGEN,EAHFM,gBACAC,EAEEP,EAFFO,UACAC,EACER,EADFQ,aAEIC,EAAoB,EAATR,EACXS,EAASJ,EAA6B,EAAXG,EAAeA,EAC1CE,EAAQT,GAASO,EAAWN,GAAcA,EAChD,OACES,EAAAC,EAAAC,cAAA,OACEC,QAAO,OAAAC,OAASL,EAAT,KAAAK,OAAkBN,GACzBO,MAAM,6BACNlB,IAAKA,GAEJmB,IAAMhB,EAAQ,GAAGiB,IAAI,SAAAC,GACpB,IAAMC,GAAMZ,EAAWN,GAAciB,EAAMnB,EAC3C,OACEW,EAAAC,EAAAC,cAAA,QACEO,GAAIA,EACJC,GAAIrB,EACJsB,GAAIF,EAAKZ,EAAWN,EACpBqB,GAAIvB,EACJwB,MAAO,CACLC,OAAQrB,EACRsB,YAAa,GAEfC,IAAKR,MAIVF,IAAMhB,GAAOiB,IAAI,SAAAC,GAChB,IAAMS,GAAMpB,EAAWN,GAAciB,EAAMnB,EACrC6B,EAAK7B,EACX,OACEW,EAAAC,EAAAC,cAACF,EAAAC,EAAMkB,SAAP,CAAgBH,IAAKR,GACnBR,EAAAC,EAAAC,cAAA,UAAQe,GAAIA,EAAIC,GAAIA,EAAIE,EAAG/B,EAAQwB,MAAO,CAAEQ,KAAM7B,KACjDI,EAAaY,IACZR,EAAAC,EAAAC,cAAA,QACEoB,EAAGL,EACHM,EAAGL,EACHL,MAAO,CACLW,SAAU,EACVC,iBAAkB,UAClBC,WAAY,SACZL,KAAM1B,IAGPC,EAAaY,IAGjBd,EAAgBc,IACfR,EAAAC,EAAAC,cAAA,QACEoB,EAAGL,EACHM,EAAc,IAAX1B,EACHgB,MAAO,CACLW,SAAU,EACVH,KAAM1B,EACN+B,WAAY,WAGbhC,EAAgBc,UChE3BmB,6MACJC,OAAS5C,IAAM6C,oFAEN,IAAAC,EAAAC,KACP,OACE/B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC8B,EAAD,CAAS5C,cAAe2C,KAAKE,MAAM7C,cAAeD,IAAK4C,KAAKH,SAC5D5B,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,oBACblC,EAAAC,EAAAC,cAAA,UACEgC,UAAU,2BACVC,QAAS,WACP,IAAMC,EAA0BN,EAAKF,OAClCS,QACGC,EAAU,IAAIC,KAAK,CAACH,EAAWI,WAAY,CAC/CC,KAAM,kBAERC,iBAAOJ,EAAS,iBARpB,iBAaAtC,EAAAC,EAAAC,cAAA,UACEgC,UAAU,gCACVC,QAAS,WACP,IAAMC,EAA0BN,EAAKF,OAClCS,QACHM,uBAAaP,EAAY,cAAe,CAAEQ,MAAO,MALrD,0BArBqB5D,IAAM6D,WAqCrC,SAASC,EAAT5D,GAMG,IALDE,EAKCF,EALDE,cACA2D,EAIC7D,EAJD6D,iBAKA,OACE/C,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,OACblC,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,mBACblC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,SACEgC,UAAU,eACVO,KAAK,SACLO,MAAO5D,EAAcE,MACrB2D,IAAK,EACLC,IAAK,IACLC,SAAU,SAAAC,GACRL,EAAiBM,OAAAC,EAAA,EAAAD,CAAA,GACZjE,EADW,CAEdE,MAAOiE,SAASH,EAAMI,OAAOR,cAKrChD,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,QACblC,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,SACEgC,UAAU,eACVO,KAAK,SACLO,MAAO5D,EAAcC,OACrB4D,IAAK,EACLC,IAAK,IACLC,SAAU,SAAAC,GACRL,EAAiBM,OAAAC,EAAA,EAAAD,CAAA,GACZjE,EADW,CAEdC,OAAQkE,SAASH,EAAMI,OAAOR,eAMxChD,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,mBACblC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,SACEgC,UAAU,eACVO,KAAK,OACLO,MAAO5D,EAAcQ,aAAa6D,KAAK,KACvCR,IAAK,EACLC,IAAK,IACLC,SAAU,SAAAC,GACRL,EAAiBM,OAAAC,EAAA,EAAAD,CAAA,GACZjE,EADW,CAEdQ,aAAcwD,EAAMI,OAAOR,MAAMU,MAAM,WAI7C1D,EAAAC,EAAAC,cAAA,SAAOgC,UAAU,kBAAjB,yBAEFlC,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,QACblC,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,SACEgC,UAAU,eACVO,KAAK,OACLO,MAAO5D,EAAcM,gBAAgB+D,KAAK,KAC1CR,IAAK,EACLC,IAAK,IACLC,SAAU,SAAAC,GACRL,EAAiBM,OAAAC,EAAA,EAAAD,CAAA,GACZjE,EADW,CAEdM,gBAAiB0D,EAAMI,OAAOR,MAAMU,MAAM,WAIhD1D,EAAAC,EAAAC,cAAA,SAAOgC,UAAU,kBAAjB,0BAGJlC,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,mBACblC,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,SACEgC,UAAU,eACVO,KAAK,SACLO,MAAO5D,EAAcG,WACrB0D,IAAK,EACLC,IAAK,IACLC,SAAU,SAAAC,GACRL,EAAiBM,OAAAC,EAAA,EAAAD,CAAA,GACZjE,EADW,CAEdG,WAAYgE,SAASH,EAAMI,OAAOR,cAK1ChD,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,mBACblC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,SACEgC,UAAU,eACVO,KAAK,OACLO,MAAO5D,EAAcI,YACrB2D,SAAU,SAAAC,GACRL,EAAiBM,OAAAC,EAAA,EAAAD,CAAA,GACZjE,EADW,CAEdI,YAAa4D,EAAMI,OAAOR,aAKlChD,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,QACblC,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,SACEgC,UAAU,eACVO,KAAK,OACLO,MAAO5D,EAAcK,UACrB0D,SAAU,SAAAC,GACRL,EAAiBM,OAAAC,EAAA,EAAAD,CAAA,GACZjE,EADW,CAEdK,UAAW2D,EAAMI,OAAOR,aAKhChD,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,QACblC,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,SACEgC,UAAU,eACVO,KAAK,OACLO,MAAO5D,EAAcO,UACrBwD,SAAU,SAAAC,GACRL,EAAiBM,OAAAC,EAAA,EAAAD,CAAA,GACZjE,EADW,CAEdO,UAAWyD,EAAMI,OAAOR,gBCjL1CW,IAASC,OAAO5D,EAAAC,EAAAC,cD4LD,WAAe,IAAA2D,EACc7E,IAAM8E,SAAwB,CACtExE,MAAO,GACPE,YAAa,OACbC,UAAW,OACXJ,OAAQ,EACRE,WAAY,GACZG,gBAAiB,CAAC,IAAK,IAAK,KAC5BC,UAAW,OACXC,aAAc,CAAC,IAAK,IAAK,OATCmE,EAAAV,OAAAW,EAAA,EAAAX,CAAAQ,EAAA,GACrBzE,EADqB2E,EAAA,GACNhB,EADMgB,EAAA,GAY5B,OACE/D,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,kBACblC,EAAAC,EAAAC,cAAA,MAAIgC,UAAU,eAAd,4BACAlC,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,QACblC,EAAAC,EAAAC,cAAC4C,EAAD,CACE1D,cAAeA,EACf2D,iBAAkBA,KAGtB/C,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,QACblC,EAAAC,EAAAC,cAAC+D,EAAD,CAAkB7E,cAAeA,OClNzB,MAAS8E,SAASC,eAAe","file":"static/js/main.5ee30d6e.chunk.js","sourcesContent":["import React from \"react\";\nimport range from \"lodash.range\";\n\nimport { DiagramConfig } from \"./types\";\n\nconst Diagram = React.forwardRef((\n  { diagramConfig }: { diagramConfig: DiagramConfig },\n  // TODO: type better\n  ref: any\n) => {\n  const {\n    radius,\n    count,\n    separation,\n    circleColor,\n    lineColor,\n    textBelowCircle,\n    textColor,\n    textInCircle\n  } = diagramConfig;\n  const diameter = radius * 2;\n  const height = textBelowCircle ? diameter * 2 : diameter;\n  const width = count * (diameter + separation) - separation;\n  return (\n    <svg\n      viewBox={`0 0 ${width} ${height}`}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      ref={ref}\n    >\n      {range(count - 1).map(idx => {\n        const x1 = (diameter + separation) * idx + radius;\n        return (\n          <line\n            x1={x1}\n            y1={radius}\n            x2={x1 + diameter + separation}\n            y2={radius}\n            style={{\n              stroke: lineColor,\n              strokeWidth: 1\n            }}\n            key={idx}\n          />\n        );\n      })}\n      {range(count).map(idx => {\n        const cx = (diameter + separation) * idx + radius;\n        const cy = radius;\n        return (\n          <React.Fragment key={idx}>\n            <circle cx={cx} cy={cy} r={radius} style={{ fill: circleColor }} />\n            {textInCircle[idx] && (\n              <text\n                x={cx}\n                y={cy}\n                style={{\n                  fontSize: 5,\n                  dominantBaseline: \"central\",\n                  textAnchor: \"middle\",\n                  fill: textColor\n                }}\n              >\n                {textInCircle[idx]}\n              </text>\n            )}\n            {textBelowCircle[idx] && (\n              <text\n                x={cx}\n                y={diameter * 1.6}\n                style={{\n                  fontSize: 5,\n                  fill: textColor,\n                  textAnchor: \"middle\"\n                }}\n              >\n                {textBelowCircle[idx]}\n              </text>\n            )}\n          </React.Fragment>\n        );\n      })}\n    </svg>\n  );\n});\n\nexport default Diagram;\n","import React from \"react\";\nimport { saveAs } from \"file-saver\";\nimport { saveSvgAsPng } from \"save-svg-as-png\";\n\nimport \"./App.css\";\nimport Diagram from \"./Diagram\";\nimport { DiagramConfig } from \"./types\";\n\n// TODO: specify width/height\n// TODO: rename project to be more general, not specific to microtones\n\nclass DiagramContainer extends React.Component<any> {\n  svgRef = React.createRef();\n\n  render() {\n    return (\n      <div>\n        <Diagram diagramConfig={this.props.diagramConfig} ref={this.svgRef} />\n        <div className=\"text-center mt-5\">\n          <button\n            className=\"btn btn-lg btn-secondary\"\n            onClick={() => {\n              const svgElement: HTMLElement = this.svgRef\n                .current as HTMLElement;\n              const svgBlob = new Blob([svgElement.outerHTML], {\n                type: \"image/svg+xml\"\n              });\n              saveAs(svgBlob, \"diagram.svg\");\n            }}\n          >\n            Download .svg\n          </button>\n          <button\n            className=\"btn btn-lg btn-secondary ml-3\"\n            onClick={() => {\n              const svgElement: HTMLElement = this.svgRef\n                .current as HTMLElement;\n              saveSvgAsPng(svgElement, \"diagram.png\", { scale: 4 });\n            }}\n          >\n            Download .png\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction ConfigForm({\n  diagramConfig,\n  setDiagramConfig\n}: {\n  diagramConfig: DiagramConfig;\n  setDiagramConfig: (conf: DiagramConfig) => void;\n}) {\n  return (\n    <form>\n      <div className=\"row\">\n        <div className=\"col-12 col-md-3\">\n          <div>\n            <label>Circle count</label>\n            <input\n              className=\"form-control\"\n              type=\"number\"\n              value={diagramConfig.count}\n              min={1}\n              max={1000}\n              onChange={event => {\n                setDiagramConfig({\n                  ...diagramConfig,\n                  count: parseInt(event.target.value)\n                });\n              }}\n            />\n          </div>\n          <div className=\"mt-3\">\n            <label>Circle radius</label>\n            <input\n              className=\"form-control\"\n              type=\"number\"\n              value={diagramConfig.radius}\n              min={1}\n              max={1000}\n              onChange={event => {\n                setDiagramConfig({\n                  ...diagramConfig,\n                  radius: parseInt(event.target.value)\n                });\n              }}\n            />\n          </div>\n        </div>\n        <div className=\"col-12 col-md-3\">\n          <div>\n            <label>Text in circle</label>\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              value={diagramConfig.textInCircle.join(\" \")}\n              min={1}\n              max={1000}\n              onChange={event => {\n                setDiagramConfig({\n                  ...diagramConfig,\n                  textInCircle: event.target.value.split(\" \")\n                });\n              }}\n            />\n            <small className=\"text-secondary\">Separate with spaces</small>\n          </div>\n          <div className=\"mt-3\">\n            <label>Text below circle</label>\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              value={diagramConfig.textBelowCircle.join(\" \")}\n              min={1}\n              max={1000}\n              onChange={event => {\n                setDiagramConfig({\n                  ...diagramConfig,\n                  textBelowCircle: event.target.value.split(\" \")\n                });\n              }}\n            />\n            <small className=\"text-secondary\">Separate with spaces</small>\n          </div>\n        </div>\n        <div className=\"col-12 col-md-3\">\n          <label>Line length</label>\n          <input\n            className=\"form-control\"\n            type=\"number\"\n            value={diagramConfig.separation}\n            min={1}\n            max={1000}\n            onChange={event => {\n              setDiagramConfig({\n                ...diagramConfig,\n                separation: parseInt(event.target.value)\n              });\n            }}\n          />\n        </div>\n        <div className=\"col-12 col-md-3\">\n          <div>\n            <label>Circle color</label>\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              value={diagramConfig.circleColor}\n              onChange={event => {\n                setDiagramConfig({\n                  ...diagramConfig,\n                  circleColor: event.target.value\n                });\n              }}\n            />\n          </div>\n          <div className=\"mt-3\">\n            <label>Line color</label>\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              value={diagramConfig.lineColor}\n              onChange={event => {\n                setDiagramConfig({\n                  ...diagramConfig,\n                  lineColor: event.target.value\n                });\n              }}\n            />\n          </div>\n          <div className=\"mt-3\">\n            <label>Text color</label>\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              value={diagramConfig.textColor}\n              onChange={event => {\n                setDiagramConfig({\n                  ...diagramConfig,\n                  textColor: event.target.value\n                });\n              }}\n            />\n          </div>\n        </div>\n      </div>\n    </form>\n  );\n}\n\nexport default function App() {\n  const [diagramConfig, setDiagramConfig] = React.useState<DiagramConfig>({\n    count: 12,\n    circleColor: \"#fff\",\n    lineColor: \"#fff\",\n    radius: 5,\n    separation: 20,\n    textBelowCircle: [\"A\", \"B\", \"C\"],\n    textColor: \"#222\",\n    textInCircle: [\"1\", \"2\", \"3\"]\n  });\n\n  return (\n    <div className=\"container my-5\">\n      <h1 className=\"text-center\">Microtone Scale Diagrams</h1>\n      <div className=\"mt-5\">\n        <ConfigForm\n          diagramConfig={diagramConfig}\n          setDiagramConfig={setDiagramConfig}\n        />\n      </div>\n      <div className=\"mt-5\">\n        <DiagramContainer diagramConfig={diagramConfig} />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}